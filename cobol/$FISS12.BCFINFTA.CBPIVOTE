?SUPPRESS
?ENV COMMON;HIGHPIN;HIGHREQUESTERS;RUNNAMED;COMPACT;SAVEABEND
?SAVE PARAM
?SYMBOLS
?INSPECT
?CHECK 5
?SQL (RELEASE2,PAGES 800);SQLMEM EXT
***********************************************************************
*                                                                     *
* MODO DE OPERACION: Batch                                            *
*                                                                     *
* FUNCION: Alimentacion de la tabla Pivote para la ejecucion de       *
*          Cuponados                                                  *
*                                                                     *
* AFECTACION DE ARCHIVOS (SI/NO): SI                                  *
*          =SCTOCPON                                                  *
*                                                                     *
***********************************************************************
 IDENTIFICATION DIVISION.
 PROGRAM-ID.    CBPIVOTE.
 AUTHOR.        FELIX NEVAREZ - ASISTICA.
 DATE-WRITTEN.  24/01/2015.

 ENVIRONMENT      DIVISION.
 CONFIGURATION    SECTION.
 SPECIAL-NAMES.
   FILE #TERM                     IS CONSOLA
   FILE "$SYSTEM.SYSTEM.COBOLLIB" IS COBOL-LIB.

 INPUT-OUTPUT SECTION.
 FILE-CONTROL.

 DATA DIVISION.
 FILE SECTION.

 WORKING-STORAGE SECTION.

 EXEC SQL INCLUDE SQLCA                      END-EXEC.
 EXEC SQL INCLUDE SQLSA                      END-EXEC.
 EXEC SQL BEGIN DECLARE SECTION              END-EXEC.
   EXEC SQL INVOKE =XPON1    AS XPON1-REG    END-EXEC.
   EXEC SQL INVOKE =XPON2    AS XPON2-REG    END-EXEC.
   EXEC SQL INVOKE =SREFISPR AS SREFISPR-REG END-EXEC.
   EXEC SQL INVOKE =SREFISTR AS SREFISTR-REG END-EXEC.
   EXEC SQL INVOKE =SCTOCPON AS SCTOCPON-REG END-EXEC.
    01 H-EJERCICIO                  PIC 9(04) COMP.
    01 H-IMPO-COSTO-PROMEDIO        PIC S9(16)V9(2) COMP.
    01 H-IMPO-COSTO-PROM-AJUSTADO   PIC S9(16)V9(2) COMP.

 EXEC SQL END  DECLARE SECTION                END-EXEC.

 EXEC SQL CONTROL QUERY INTERACTIVE ACCESS ON END-EXEC.

 EXEC SQL
  DECLARE CUR_SREFISPR CURSOR FOR
   SELECT
    RFPR_NUM_CONTRATO
   ,RFPR_NUM_PRODUCTO
   ,CAST(:H-EJERCICIO * 100+1 AS NUMERIC(6,0))
   ,RFPR_TIT_FINAL
   ,UPPER(TRIM(RFPR_CVE_TIPO_SALDO))
   ,RFPR_FECH_ULT_MOVTO
    FROM =SREFISPR
         JOIN =SREFISAC
           ON (:H-EJERCICIO - 1,RFPR_NUM_CONTRATO)
             =(RFAC_ANIO,RFAC_NUM_CONTRATO)
         JOIN =SEMICPON
           ON RFPR_NUM_PRODUCTO=EPON_NUM_PRODUCTO
     WHERE
          RFPR_ANIO_MES=(:H-EJERCICIO -1)*100+12
      AND SUBSTRING (RFPR_CVE_TIPO_SALDO FROM 1 FOR 2)="DI"
      AND RFAC_CVE_TIPO_CONTRATO IN ("BA","TE")
      AND RFAC_NUM_USO_CONTRATO NOT IN (10,12,13,15,19,20,21,22)
      AND RFPR_TIT_FINAL<>0
      AND (RFPR_CVE_TIPO_SALDO="DIRE" OR RFPR_CVE_TIPO_VALOR IN ("2","Q","R","R1","1C","FH"))
      AND RFPR_CVE_TIPO_VALOR <> "CF"
* 1B FIBRATC 14
      AND RFPR_NUM_PRODUCTO <> 37860
   BROWSE ACCESS
 END-EXEC.

 EXEC SQL
    DECLARE CUR_XPON1 CURSOR FOR
   SELECT
     XPON1_NUM_CONTRATO
   , XPON1_NUM_PRODUCTO
   , XPON1_ANIO_MES
   , XPON1_TIT_INICIAL
   , XPON1_CVE_TIPO_SALDO
   ,
   CASE WHEN MAX(RFTR_FECH_FIN_OPERACION)
         BETWEEN 20030101 and (:H-EJERCICIO - 1)*10000+1231
         THEN MAX(RFTR_FECH_FIN_OPERACION)
         ELSE AVG(XPON1_FECH_ULT_MOVTO) END
    FROM =xpon1
   LEFT JOIN =SREFISTR
   ON
    (XPON1_NUM_CONTRATO,XPON1_NUM_PRODUCTO,XPON1_CVE_TIPO_SALDO)
   =(RFTR_NUM_CONTRATO,RFTR_NUM_PRODUCTO,RFTR_CVE_TIPO_SALDO)
   WHERE RFTR_ANIO_MES<:H-EJERCICIO * 100+1
   GROUP BY 1,2,3,4,5
   BROWSE ACCESS
 END-EXEC.

 EXEC SQL
    DECLARE CUR_XPON2 CURSOR FOR
   SELECT
     XPON2_NUM_CONTRATO
   , XPON2_NUM_PRODUCTO
   , XPON2_ANIO_MES
   , XPON2_TIT_INICIAL
   , case when RFPR_IMPO_COSTO_PROMEDIO is null then 0 else RFPR_IMPO_COSTO_PROMEDIO end
   , case when RFPR_IMPO_COSTO_PROM_AJUSTADO is null then 0 else RFPR_IMPO_COSTO_PROM_AJUSTADO end
   , XPON2_FECH_ULT_MOVTO
   FROM =XPON2
   LEFT JOIN =SREFISPR
   ON
    ( cast(XPON2_FECH_ULT_MOVTO/100 as numeric(6,0))
    , XPON2_NUM_CONTRATO
    , XPON2_NUM_PRODUCTO
    , XPON2_CVE_TIPO_SALDO)
   =( RFPR_ANIO_MES
    , RFPR_NUM_CONTRATO
    , RFPR_NUM_PRODUCTO
    , RFPR_CVE_TIPO_SALDO)
   BROWSE ACCESS
 END-EXEC.

 EXEC SQL
    DECLARE CUR_SREFISTR CURSOR FOR
   SELECT
     RFTR_NUM_CONTRATO
   , RFTR_NUM_PRODUCTO
   , MIN(cast (RFTR_FECH_FIN_OPERACION/100 as numeric (6,0)))
     FROM =SREFISTR
            JOIN =SEMICPON ON RFTR_NUM_PRODUCTO=EPON_NUM_PRODUCTO
       LEFT JOIN =SOPDISVE ON (RFTR_CVE_OPER,1)
                                    =(OPDI_CVE_OPER_ORIGEN,OPDI_NUMF_SECUENCIA_OPER)

       LEFT JOIN =SREFISTE ON (RFTR_CVE_TIPO_TRANSACCION,RFTR_CVE_OPER)
                                    =(RFTE_CVE_TIPO_TRANSACCION,RFTE_CVE_OPER)
       LEFT JOIN =SREFISAC
                                  ON (:H-EJERCICIO,RFTR_NUM_CONTRATO)
                                    =(RFAC_ANIO,RFAC_NUM_CONTRATO)
       LEFT JOIN =SREFISPR DIRE
                                  ON (:H-EJERCICIO *100+1
                                     ,RFTR_NUM_CONTRATO,RFTR_NUM_PRODUCTO,"DIRE")
                                   = (DIRE.RFPR_ANIO_MES
                                     ,DIRE.RFPR_NUM_CONTRATO
                                     ,DIRE.RFPR_NUM_PRODUCTO
                                     ,DIRE.RFPR_CVE_TIPO_SALDO)
       LEFT JOIN =SREFISPR DISP
                                  ON (:H-EJERCICIO *100+1
                                     ,RFTR_NUM_CONTRATO,RFTR_NUM_PRODUCTO,"DISP")
                                   = (DISP.RFPR_ANIO_MES
                                     ,DISP.RFPR_NUM_CONTRATO
                                     ,DISP.RFPR_NUM_PRODUCTO
                                     ,DISP.RFPR_CVE_TIPO_SALDO)
   WHERE
       RFTR_FECH_FIN_OPERACION BETWEEN :H-EJERCICIO *10000+0101
                                   AND :H-EJERCICIO *10000+1231
   AND SUBSTRING (RFTR_CVE_OPER FROM 6 FOR 3)<>"ARE"
   AND SUBSTRING (RFTR_CVE_TIPO_SALDO FROM 1 FOR 2)="DI"
   AND RFTR_CVE_TIPO_TRANSACCION NOT IN ("GARA","MDAD")
   AND RFTE_CVE_OPER IS NULL
   AND (((OPDI_CODN_TIPO_IMPORTE=4 AND OPDI_CODN_CUS=0 AND OPDI_CODN_EFE=1)
      OR (OPDI_CODN_TIPO_IMPORTE=0 AND OPDI_CODN_CUS<>0))
      OR RFTR_CVE_OPER IN ("ENTTITRA","IMPUDEPA","RETEIMPU"))
   AND RFAC_CVE_TIPO_CONTRATO IN ("BA","TE")
   AND RFAC_NUM_USO_CONTRATO NOT IN (10,12,13,15,19,20,21,22)
   AND ((DIRE.RFPR_ANIO_MES IS NULL
         AND DISP.RFPR_ANIO_MES IS NULL)
     OR (DIRE.RFPR_TIT_INICIAL=0
          OR DISP.RFPR_TIT_INICIAL=0))
   AND (RFTR_CVE_TIPO_SALDO="DIRE" OR RFTR_CVE_TIPO_VALOR IN ("2","Q","R","R1","1C","FH"))
   AND RFTR_CVE_TIPO_VALOR <> "CF"
* 1B FIBRATC 14
   AND RFTR_NUM_PRODUCTO <> 37860
   GROUP BY 1,2
   BROWSE ACCESS
 END-EXEC.


 EXEC SQL CONTROL QUERY INTERACTIVE ACCESS OFF END-EXEC.

 01 WSS-PARAM  PIC  X(30).
 01 WSS-RESULT PIC S9(4) COMP.

 01 WSS-PARAM-TXT-EJERCICIO PIC X(04).
 01 FILLER REDEFINES WSS-PARAM-TXT-EJERCICIO.
    03 WSS-PARAM-EJERCICIO PIC 9(04).

 01 WSS-EOT-SREFISPR                    PIC X(01).
    88 WSS-EOT-SREFISPR-SI              VALUE "S".
    88 WSS-EOT-SREFISPR-NO              VALUE "N".
 01 WSS-EOT-SREFISTR                    PIC X(01).
    88 WSS-EOT-SREFISTR-SI              VALUE "S".
    88 WSS-EOT-SREFISTR-NO              VALUE "N".
 01 WSS-EOT-XPON1                    PIC X(01).
    88 WSS-EOT-XPON1-SI              VALUE "S".
    88 WSS-EOT-XPON1-NO              VALUE "N".
 01 WSS-EOT-XPON2                    PIC X(01).
    88 WSS-EOT-XPON2-SI              VALUE "S".
    88 WSS-EOT-XPON2-NO              VALUE "N".

 01 WSS-ERROR PIC 9(04) COMP.

 01 WS-CURRENT-DATE-DATA.
   05  WS-CURRENT-DATE.
       10  WS-CURRENT-YEAR         PIC 9(04).
       10  WS-CURRENT-MONTH        PIC 9(02).
       10  WS-CURRENT-DAY          PIC 9(02).
   05  WS-CURRENT-TIME.
       10  WS-CURRENT-HOURS        PIC 9(02).
       10  WS-CURRENT-MINUTE       PIC 9(02).
       10  WS-CURRENT-SECOND       PIC 9(02).
       10  WS-CURRENT-MILLISECONDS PIC 9(02).

 PROCEDURE DIVISION.

 MAIN.
      PERFORM 0010-INICIO
      PERFORM 1000-PROCESO
      MOVE FUNCTION CURRENT-DATE to WS-CURRENT-DATE-DATA
      DISPLAY "FIN: ", WS-CURRENT-TIME.
 STOP RUN.


 0010-INICIO.
    INITIALIZE WSS-ERROR
    MOVE FUNCTION CURRENT-DATE to WS-CURRENT-DATE-DATA
    DISPLAY "INICIO: ", WS-CURRENT-TIME
    PERFORM 0010-OBTIENE-PARAMETROS.

 0010-OBTIENE-PARAMETROS.
     MOVE ZEROES TO WSS-PARAM-EJERCICIO
     MOVE "EJERCICIO" TO WSS-PARAM.
     ENTER "GETPARAMTEXT" OF COBOL-LIB USING WSS-PARAM, WSS-PARAM-TXT-EJERCICIO
                                      GIVING WSS-RESULT
     IF WSS-RESULT < 1
        COMPUTE H-EJERCICIO = WS-CURRENT-YEAR - 1
     ELSE
        MOVE WSS-PARAM-EJERCICIO TO H-EJERCICIO
     END-IF.

 1000-PROCESO.
    PERFORM 1100-LLENA-XPON1.
    PERFORM 1200-LLENA-XPON2.
    PERFORM 1300-LLENA-SCTOCPON.

 1300-LLENA-SCTOCPON.
      PERFORM 1300-NOAUDIT-SCTOCPON.
      PERFORM 1300-DELETE-SCTOCPON.
      PERFORM 1300-LEE-XPON2.
      PERFORM 1300-LEE-SREFISTR.
      PERFORM 1300-AUDIT-SCTOCPON.

 1200-LLENA-XPON2.
      PERFORM 1200-DELETE-XPON2.
      PERFORM 1200-LEE-XPON1.

 1100-LLENA-XPON1.
      PERFORM 1100-DELETE-XPON1
      PERFORM 1100-LEE-SREFISPR.

 1300-NOAUDIT-SCTOCPON.
      EXEC SQL ALTER TABLE =SCTOCPON NO AUDIT END-EXEC.
      IF SQLCODE NOT = ZEROES AND NOT = 100
         DISPLAY "ERROR EN ALTER-TABLE-SCTOCPON" UPON CONSOLA
         ENTER SQLCADISPLAY USING SQLCA
         ENTER ABEND
      END-IF.

 1300-AUDIT-SCTOCPON.
      EXEC SQL ALTER TABLE =SCTOCPON AUDIT END-EXEC.
      IF SQLCODE NOT = ZEROES AND NOT = 100
         DISPLAY "ERROR EN ALTER-TABLE-SCTOCPON" UPON CONSOLA
         ENTER SQLCADISPLAY USING SQLCA
         ENTER ABEND
      END-IF.

 1100-DELETE-XPON1.
      EXEC SQL DELETE FROM =XPON1 END-EXEC.
      IF SQLCODE NOT = ZEROES AND NOT = 100
         DISPLAY "ERROR EN DELETE-XPON1" UPON CONSOLA
         ENTER SQLCADISPLAY USING SQLCA
         ENTER ABEND
      END-IF.

 1200-DELETE-XPON2.
      EXEC SQL DELETE FROM =XPON2 END-EXEC.
      IF SQLCODE NOT = ZEROES AND NOT = 100
         DISPLAY "ERROR EN DELETE-XPON2" UPON CONSOLA
         ENTER SQLCADISPLAY USING SQLCA
         ENTER ABEND
      END-IF.

 1300-DELETE-SCTOCPON.
      EXEC SQL DELETE FROM =SCTOCPON END-EXEC.
      IF SQLCODE NOT = ZEROES AND NOT = 100 AND NOT = 8203
         DISPLAY "ERROR EN DELETE-SCTOCPON" UPON CONSOLA
         ENTER SQLCADISPLAY USING SQLCA
         ENTER ABEND
      END-IF.

 1100-LEE-SREFISPR.
      MOVE "N" TO WSS-EOT-SREFISPR
      PERFORM 9000-OPEN-SREFISPR
      IF WSS-ERROR = ZEROES
         PERFORM 1100-CICLO-SREFISPR UNTIL WSS-EOT-SREFISPR-SI
          EXEC SQL CLOSE CUR_SREFISPR END-EXEC
      END-IF.

 1100-CICLO-SREFISPR.
    PERFORM 9000-FETCH-SREFISPR
    IF WSS-EOT-SREFISPR-NO
        MOVE RFPR-NUM-CONTRATO             TO XPON1-NUM-CONTRATO
        MOVE RFPR-NUM-PRODUCTO             TO XPON1-NUM-PRODUCTO
        MOVE RFPR-ANIO-MES                 TO XPON1-ANIO-MES
        MOVE RFPR-TIT-FINAL                TO XPON1-TIT-INICIAL
        MOVE RFPR-CVE-TIPO-SALDO           TO XPON1-CVE-TIPO-SALDO
        MOVE RFPR-FECH-ULT-MOVTO           TO XPON1-FECH-ULT-MOVTO
        PERFORM 9000-INSERT-XPON1
    END-IF.

 9000-INSERT-XPON1.
    EXEC SQL
        INSERT INTO =XPON1
        VALUES (
             :XPON1-NUM-CONTRATO
            ,:XPON1-NUM-PRODUCTO
            ,:XPON1-ANIO-MES
            ,:XPON1-TIT-INICIAL
            ,:XPON1-CVE-TIPO-SALDO
            ,:XPON1-FECH-ULT-MOVTO)
        STABLE ACCESS
    END-EXEC.
    IF SQLCODE NOT = ZEROES
        DISPLAY "ERROR EN INSERT XPON1, SQLCODE:" SQLCODE
    END-IF.


 9000-OPEN-SREFISPR.
      EXEC SQL OPEN CUR_SREFISPR END-EXEC
      IF SQLCODE NOT = ZEROES
         DISPLAY "Error en OPEN-SREFISPR"
         PERFORM 9000-SQL-ERROR.

 9000-FETCH-SREFISPR.
        EXEC SQL FETCH CUR_SREFISPR INTO
            :RFPR-NUM-CONTRATO
           ,:RFPR-NUM-PRODUCTO
           ,:RFPR-ANIO-MES
           ,:RFPR-TIT-FINAL
           ,:RFPR-CVE-TIPO-SALDO
           ,:RFPR-FECH-ULT-MOVTO
        END-EXEC
        IF SQLCODE NOT = ZEROES
           MOVE "S" TO WSS-EOT-SREFISPR
           IF SQLCODE NOT = 100
              DISPLAY " ERROR " SQLCODE " EN FETCH CUR_SREFISPR"
              ENTER TAL "SQLCADISPLAY" USING SQLCA
              ENTER ABEND
           END-IF
        END-IF.

 1200-LEE-XPON1.
      MOVE "N" TO WSS-EOT-XPON1
      PERFORM 9000-OPEN-XPON1
      IF WSS-ERROR = ZEROES
         PERFORM 1200-CICLO-XPON1 UNTIL WSS-EOT-XPON1-SI
          EXEC SQL CLOSE CUR_XPON1 END-EXEC
      END-IF.

 1200-CICLO-XPON1.
    PERFORM 9000-FETCH-XPON1
    IF WSS-EOT-XPON1-NO
        MOVE XPON1-NUM-CONTRATO             TO XPON2-NUM-CONTRATO
        MOVE XPON1-NUM-PRODUCTO             TO XPON2-NUM-PRODUCTO
        MOVE XPON1-ANIO-MES                 TO XPON2-ANIO-MES
        MOVE XPON1-TIT-INICIAL              TO XPON2-TIT-INICIAL
        MOVE XPON1-CVE-TIPO-SALDO           TO XPON2-CVE-TIPO-SALDO
        MOVE XPON1-FECH-ULT-MOVTO           TO XPON2-FECH-ULT-MOVTO
        PERFORM 9000-INSERT-XPON2
    END-IF.

 9000-INSERT-XPON2.
    EXEC SQL
        INSERT INTO =XPON2
        VALUES (
             :XPON2-NUM-CONTRATO
            ,:XPON2-NUM-PRODUCTO
            ,:XPON2-ANIO-MES
            ,:XPON2-TIT-INICIAL
            ,:XPON2-CVE-TIPO-SALDO
            ,:XPON2-FECH-ULT-MOVTO)
        STABLE ACCESS
    END-EXEC.
    IF SQLCODE NOT = ZEROES
        DISPLAY "ERROR EN INSERT XPON2, SQLCODE:" SQLCODE
    END-IF.


 9000-OPEN-XPON1.
      EXEC SQL OPEN CUR_XPON1 END-EXEC
      IF SQLCODE NOT = ZEROES
         DISPLAY "Error en OPEN-XPON1"
         PERFORM 9000-SQL-ERROR.

 9000-FETCH-XPON1.
        EXEC SQL FETCH CUR_XPON1 INTO
            :XPON1-NUM-CONTRATO
           ,:XPON1-NUM-PRODUCTO
           ,:XPON1-ANIO-MES
           ,:XPON1-TIT-INICIAL
           ,:XPON1-CVE-TIPO-SALDO
           ,:XPON1-FECH-ULT-MOVTO
        END-EXEC
        IF SQLCODE NOT = ZEROES
           MOVE "S" TO WSS-EOT-XPON1
           IF SQLCODE NOT = 100
              DISPLAY " ERROR " SQLCODE " EN FETCH CUR_XPON1"
              PERFORM 9000-SQL-ERROR
           END-IF
        END-IF.

 1300-LEE-XPON2.
      MOVE "N" TO WSS-EOT-XPON2
      PERFORM 9000-OPEN-XPON2
      IF WSS-ERROR = ZEROES
         PERFORM 1300-CICLO-XPON2 UNTIL WSS-EOT-XPON2-SI
         EXEC SQL CLOSE CUR_XPON2 END-EXEC
      END-IF.

 1300-CICLO-XPON2.
    PERFORM 9000-FETCH-XPON2
    IF WSS-EOT-XPON2-NO
        MOVE XPON2-NUM-CONTRATO             TO TPON-NUM-CONTRATO
        MOVE XPON2-NUM-PRODUCTO             TO TPON-NUM-PRODUCTO
        MOVE XPON2-ANIO-MES                 TO TPON-ANIO-MES
        MOVE XPON2-TIT-INICIAL              TO TPON-TIT-INICIAL
        MOVE ZEROES                         TO TPON-TIT-FINAL
        MOVE H-IMPO-COSTO-PROMEDIO          TO TPON-IMPO-COSTO-PROMEDIO
        MOVE H-IMPO-COSTO-PROM-AJUSTADO     TO TPON-IMPO-COSTO-PROM-AJUSTADO
        MOVE XPON2-FECH-ULT-MOVTO           TO TPON-FECH-ULT-MOVTO
        PERFORM 9000-INSERT-SCTOCPON
    END-IF.

 9000-INSERT-SCTOCPON.
    EXEC SQL
        INSERT INTO =SCTOCPON
        VALUES (
             :TPON-NUM-CONTRATO
            ,:TPON-NUM-PRODUCTO
            ,:TPON-ANIO-MES
            ,:TPON-TIT-INICIAL
            ,:TPON-TIT-FINAL
            ,:TPON-IMPO-COSTO-PROMEDIO
            ,:TPON-IMPO-COSTO-PROM-AJUSTADO
            ,:TPON-FECH-ULT-MOVTO)
        STABLE ACCESS
    END-EXEC.
    IF SQLCODE NOT = ZEROES
       DISPLAY "ERROR EN INSERT SCTOCPON" UPON CONSOLA
       ENTER SQLCADISPLAY USING SQLCA
       ENTER ABEND
    END-IF.


 9000-OPEN-XPON2.
      EXEC SQL OPEN CUR_XPON2 END-EXEC
      IF SQLCODE NOT = ZEROES
         DISPLAY "Error en OPEN-XPON2"
         PERFORM 9000-SQL-ERROR.

 9000-FETCH-XPON2.
        EXEC SQL FETCH CUR_XPON2 INTO
            :XPON2-NUM-CONTRATO
           ,:XPON2-NUM-PRODUCTO
           ,:XPON2-ANIO-MES
           ,:XPON2-TIT-INICIAL
           ,:H-IMPO-COSTO-PROMEDIO
           ,:H-IMPO-COSTO-PROM-AJUSTADO
           ,:XPON2-FECH-ULT-MOVTO
        END-EXEC
        IF SQLCODE NOT = ZEROES
           MOVE "S" TO WSS-EOT-XPON2
           IF SQLCODE NOT = 100
              DISPLAY " ERROR " SQLCODE " EN FETCH CUR_XPON2"
              PERFORM 9000-SQL-ERROR
           END-IF
        END-IF.

 1300-LEE-SREFISTR.
      MOVE "N" TO WSS-EOT-SREFISTR
      PERFORM 9000-OPEN-SREFISTR
      IF SQLCODE = ZEROES
         PERFORM 1400-CICLO-SREFISTR UNTIL WSS-EOT-SREFISTR-SI
         EXEC SQL CLOSE CUR_SREFISTR END-EXEC
      END-IF.

 1400-CICLO-SREFISTR.
    PERFORM 9000-FETCH-SREFISTR
    IF WSS-EOT-SREFISTR-NO
        MOVE RFTR-NUM-CONTRATO TO TPON-NUM-CONTRATO
        MOVE RFTR-NUM-PRODUCTO TO TPON-NUM-PRODUCTO
        MOVE RFTR-ANIO-MES     TO TPON-ANIO-MES
        MOVE ZEROES            TO TPON-TIT-INICIAL
                                  TPON-TIT-FINAL
                                  TPON-IMPO-COSTO-PROMEDIO
                                  TPON-IMPO-COSTO-PROM-AJUSTADO
                                  TPON-FECH-ULT-MOVTO
        PERFORM 9000-INSERT-SCTOCPON
    END-IF.

 9000-OPEN-SREFISTR.
      EXEC SQL OPEN CUR_SREFISTR END-EXEC
      IF SQLCODE NOT = ZEROES
         DISPLAY "Error en OPEN-SREFISTR"
         PERFORM 9000-SQL-ERROR.

 9000-FETCH-SREFISTR.
        EXEC SQL FETCH CUR_SREFISTR INTO
            :RFTR-NUM-CONTRATO
           ,:RFTR-NUM-PRODUCTO
           ,:RFTR-ANIO-MES
        END-EXEC
        IF SQLCODE NOT = ZEROES
           MOVE "S" TO WSS-EOT-SREFISTR
           IF SQLCODE NOT = 100
              DISPLAY " ERROR " SQLCODE " EN FETCH CUR_SREFISTR"
              PERFORM 9000-SQL-ERROR
           END-IF
        END-IF.



 9000-SQL-ERROR.
      DISPLAY "SQL Error : " SQLCODE
      ENTER TAL "SQLCADISPLAY" USING SQLCA.
      ENTER ABEND.
